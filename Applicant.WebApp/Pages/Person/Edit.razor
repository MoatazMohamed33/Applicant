@page "/persons/edit/{id:guid}"
@inject IPersonService _personService
@inject NavigationManager _navigationManager
@inject IMapper _mapper

<div class="row">
    <div class="col-lg-9">
        <h1>Edit</h1>
    </div>
    <div class="col-lg-3 text-right">
        <a class="btn btn-secondary btn-sm" href="/persons" role="button">Go Back To List</a>
    </div>
</div>

@if (person != null)
{
    <EditForm Model="@person" OnValidSubmit="@SubmitPerson">
        <div class="form-group">
            <label><span style="color:red">*</span>Name</label>
            <InputText class="form-control" @bind-Value="person.Name" />
        </div>
        <div class="form-group">
            <label><span style="color:red">*</span>Address</label>
            <InputText class="form-control" @bind-Value="person.Address" />
        </div>
        <div class="form-group">
            <label><span style="color:red">*</span>FamilyName</label>
            <InputText class="form-control" @bind-Value="person.FamilyName" />
        </div>
        <div class="form-group">
            <label><span style="color:red">*</span>CountryOfOrigin</label>
            <InputText class="form-control" @bind-Value="person.CountryOfOrigin" />
        </div>
        <div class="form-group">
            <label><span style="color:red">*</span>EMailAdress</label>
            <InputText class="form-control" @bind-Value="person.EMailAdress" />
        </div>
        <div class="form-group">
            <label><span style="color:red">*</span>Age</label>
            <InputNumber class="form-control" @bind-Value="person.Age" />
        </div>
        <div class="form-group">
            <label><span style="color:red">*</span>Hired</label>
            <InputCheckbox class="form-control" @bind-Value="person.Hired" />
        </div>
        <button type="submit" class="btn btn-primary">Edit</button>
    </EditForm>
    @if (results.Errors.Count > 0)
    {
        foreach (var item in results.Errors)
        {
            <MudAlert Severity="Severity.Error">@($"{item.Property}  {item.Message}")</MudAlert>
        }
    }
}

@code {
    [Parameter]
    public int Id { get; set; }
    PersonEditCommand person = new PersonEditCommand();
    OutputResponse<int> results;
    protected override async Task OnInitializedAsync()
    {
        person.Id = Id;
        var personDB = await _personService.Get(new PersonGetCommand() { Id = Id });
        person= _mapper.Map<PersonEditCommand>(personDB);
    }

    private async void SubmitPerson()
    {
        results = await _personService.Edit(person);
        if (results.StatusCode == HttpStatusCode.Created)
        {
            _navigationManager.NavigateTo("/persons");
        }
    }
}